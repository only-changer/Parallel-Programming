[
  "Associative property",
  "{{About|the associative property in mathematics|associativity in the central processing unit memory cache|CPU cache#Associativity|associativity in programming languages|operator associativity|the meaning of an associated group of people in linguistics|Associativity (linguistics)}} \n {{redirect2|Associative|non-associative|associative and non-associative learning|Learning#Types}} \n {{short description|Property allowing removing parentheses in a sequence of operations}} \n {{More citations needed|date=June 2009}} \n {{Transformation rules}} \n \n In [[mathematics]], the '''associative property''' < ref > \n {{cite book \n |last=Hungerford \n |first=Thomas W. \n |year=1974 |edition=1st \n |title=Algebra \n |page=24 \n |publisher=[[Springer Science+Business Media|Springer]] \n |isbn=978-0387905181 \n |quote=Definition 1.1 (i) a(bc) = (ab)c for all a, b, c in G.}} < /ref >  is a property of some [[binary operation]]s, which means that rearranging the parentheses in an expression will not change the result. In [[propositional logic]], '''associativity''' is a [[Validity (logic)|valid]] [[rule of replacement]] for [[well-formed formula|expressions]] in [[Formal proof|logical proofs]]. \n \n Within an expression containing two or more occurrences in a row of the same associative operator, the order in which the [[Operation (mathematics)|operations]] are performed does not matter as long as the sequence of the [[operand]]s is not changed. That is, (after rewriting the expression with parentheses and in infix notation if necessary) rearranging the [[parentheses]] in such an expression will not change its value. Consider the following equations: \n \n : < math > (2 + 3) + 4 = 2 + (3 + 4) = 9 \\, < /math > \n \n : < math > 2 \\times (3 \\times 4) = (2 \\times 3) \\times 4 = 24 . < /math > \n \n Even though the parentheses were rearranged on each line, the values of the expressions were not altered. Since this holds true when performing addition and multiplication on any [[real number]]s, it can be said that  \" addition and multiplication of real numbers are associative operations \" . \n \n Associativity is not the same as [[commutativity]], which addresses whether the order of two [[operand]]s affects the result. For example, the order does not matter in the multiplication of real numbers, that is, {{nowrap|1=''a'' \u00d7 ''b'' = ''b'' \u00d7 ''a''}}, so we say that the multiplication of real numbers is a commutative operation. However, operations such as [[function composition]] and [[matrix multiplication]] are associative, but (generally) not commutative. \n \n Associative operations are abundant in mathematics; in fact, many [[algebraic structure]]s (such as [[semigroup (mathematics)|semigroups]] and [[category (mathematics)|categories]]) explicitly require their binary operations to be associative. \n \n However, many important and interesting operations are non-associative; some examples include [[subtraction]], [[exponentiation]], and the [[vector cross product]].  In contrast to the theoretical properties of real numbers, the addition of [[floating point]] numbers in computer science is not associative, and the choice of how to associate an expression can have a significant effect on rounding error. \n \n == Definition == \n [[File:Semigroup_associative.svg|thumbnail|A binary operation \u2217 on the set ''S'' is associative when [[Commutative diagram|this diagram commutes]]. That is, when the two paths from ''S''\u00d7''S''\u00d7''S'' to ''S'' [[Function composition|compose]] to the same function from ''S''\u00d7''S''\u00d7''S'' to ''S''.]] \n Formally, a [[binary operation]] \u2217 on a [[Set (mathematics)|set]] ''S'' is called '''associative''' if it satisfies the '''associative law''': \n \n :(''x'' \u2217 ''y'') \u2217 ''z'' = ''x'' \u2217 (''y'' \u2217 ''z'') for all ''x'', ''y'', ''z'' in ''S''. \n \n Here, \u2217 is used to replace the symbol of the operation, which may be any symbol, and even the absence of symbol ([[wikt:juxtaposition|juxtaposition]]) as for [[multiplication]]. \n \n :(''xy'')''z'' = ''x''(''yz'') = ''xyz'' for all ''x'', ''y'', ''z'' in ''S''. \n \n The associative law can also be expressed in functional notation thus: {{nowrap|1=''f''(''f''(''x'', ''y''), ''z'') = ''f''(''x'', ''f''(''y'', ''z''))}}. \n \n ==Generalized associative law== \n [[Image:Tamari lattice.svg|thumb|250px|In the absence of the associative property, five factors ''a, b, c, d, e'' result in a [[Tamari lattice]] of order four, possibly different products.]] \n If a binary operation is associative, repeated application of the operation produces the same result regardless of how valid pairs of parentheses are inserted in the expression. < ref > {{cite book |last=Durbin |first=John R. |title=Modern Algebra: an Introduction |year=1992 |publisher=Wiley |location=New York |isbn=978-0-471-51001-7 |page=78 |url=http://www.wiley.com/WileyCDA/WileyTitle/productCd-EHEP000258.html |edition=3rd |quote=If  < math > a_1, a_2, \\dots, a_n \\,\\, (n \\ge 2) < /math >  are elements of a set with an associative operation, then the product  < math > a_1 a_2 \\dots a_n < /math >  is unambiguous; this is, the same element will be obtained regardless of how parentheses are inserted in the product}} < /ref >  This is called the '''generalized associative law'''. For instance, a product of four elements may be written, without changing the order of the factors, in five possible ways: \n \n :  < math > ((ab)c)d < /math > \n :  < math > (ab)(cd) < /math > \n :  < math > (a(bc))d < /math > \n :  < math > a((bc)d) < /math > \n :  < math > a(b(cd)) < /math > \n \n If the product operation is associative, the generalized associative law says that all these formulas will yield the same result. So unless the formula with omitted parentheses already has a different meaning (see below), the parentheses can be considered unnecessary and  \" the \"  product can be written unambiguously as \n \n : < math > abcd. < /math > \n \n As the number of elements increases, the [[Catalan number#Applications in combinatorics|number of possible ways to insert parentheses]] grows quickly, but they remain unnecessary for disambiguation. \n \n An example where this does not work is the [[logical biconditional]]  < math > \\leftrightarrow < /math > . It is associative, thus A < math > \\leftrightarrow < /math > (B < math > \\leftrightarrow < /math > C) is equivalent to (A < math > \\leftrightarrow < /math > B) < math > \\leftrightarrow < /math > C, but A < math > \\leftrightarrow < /math > B < math > \\leftrightarrow < /math > C most commonly means (A < math > \\leftrightarrow < /math > B and B < math > \\leftrightarrow < /math > C), which is not equivalent. \n \n ==Examples== \n [[File:Associativity of binary operations (without question marks).svg|thumb|In associative operations is  < math > (x\\circ y)\\circ z = x\\circ(y\\circ z) < /math > .]] \n [[File:Associativity of real number addition.svg|thumb|The addition of real numbers is associative.]] \n Some examples of associative operations include the following. \n \n * The [[string concatenation|concatenation]] of the three strings  < code > \" hello \" < /code > ,  < code > \"   \" < /code > ,  < code > \" world \" < /code >  can be computed by concatenating the first two strings (giving  < code > \" hello  \" < /code > ) and appending the third string ( < code > \" world \" < /code > ), or by joining the second and third string (giving  < code > \"  world \" < /code > ) and concatenating the first string ( < code > \" hello \" < /code > ) with the result. The two methods produce the same result; string concatenation is associative (but not commutative). \n * In [[arithmetic]], [[addition]] and [[multiplication]] of [[real number]]s are associative; i.e., \n ::  < math > \n \\left. \n \\begin{matrix} \n (x+y)+z=x+(y+z)=x+y+z\\quad \n \\\\ \n (x\\,y)z=x(y\\,z)=x\\,y\\,z\\qquad\\qquad\\qquad\\quad\\ \\ \\, \n \\end{matrix} \n \\right\\} \n \\mbox{for all }x,y,z\\in\\mathbb{R}. \n < /math > \n :Because of associativity, the grouping parentheses can be omitted without ambiguity. \n * The trivial operation {{math|1=''x'' \u2217 ''y'' = ''x''}} (that is, the result is the first argument, no matter what the second argument is) is associative but not commutative. Likewise, the trivial operation {{math|1=''x'' \u2218 ''y'' = ''y''}} (that is, the result is the second argument, no matter what the first argument is) is associative but not commutative. \n * Addition and multiplication of [[complex number]]s and [[quaternion]]s are associative. Addition of [[octonion]]s is also associative, but multiplication of octonions is non-associative. \n * The [[greatest common divisor]] and [[least common multiple]] functions act associatively. \n ::  < math > \n \n \\left. \n \\begin{matrix} \n \\operatorname{gcd}(\\operatorname{gcd}(x,y),z)= \n \\operatorname{gcd}(x,\\operatorname{gcd}(y,z))= \n \\operatorname{gcd}(x,y,z)\\ \\quad \n \\\\ \n \\operatorname{lcm}(\\operatorname{lcm}(x,y),z)= \n \\operatorname{lcm}(x,\\operatorname{lcm}(y,z))= \n \\operatorname{lcm}(x,y,z)\\quad \n \\end{matrix} \n \\right\\}\\mbox{ for all }x,y,z\\in\\mathbb{Z}. \n < /math > \n * Taking the [[intersection (set theory)|intersection]] or the [[union (set theory)|union]] of [[Set (mathematics)|sets]]: \n ::  < math > \n \n \\left. \n \\begin{matrix} \n (A\\cap B)\\cap C=A\\cap(B\\cap C)=A\\cap B\\cap C\\quad \n \\\\ \n (A\\cup B)\\cup C=A\\cup(B\\cup C)=A\\cup B\\cup C\\quad \n \\end{matrix} \n \\right\\}\\mbox{for all sets }A,B,C. \n < /math > \n * If ''M'' is some set and ''S'' denotes the set of all functions from ''M'' to ''M'', then the operation of [[function composition]] on ''S'' is associative: \n \n ::  < math > (f\\circ g)\\circ h=f\\circ(g\\circ h)=f\\circ g\\circ h\\qquad\\mbox{for all }f,g,h\\in S. < /math > \n * Slightly more generally, given four sets ''M'', ''N'', ''P'' and ''Q'', with ''h'': ''M'' to ''N'', ''g'': ''N'' to ''P'', and ''f'': ''P'' to ''Q'', then \n \n ::  < math > (f\\circ g)\\circ h=f\\circ(g\\circ h)=f\\circ g\\circ h < /math > \n \n : as before. In short, composition of maps is always associative. \n * Consider a set with three elements, A, B, and C. The following operation: \n \n :{| class= \" wikitable \"  style= \" text-align:center \" \n |- \n ! \u00d7 !! A !! B !! C \n |- \n ! A \n | A || A || A \n |- \n ! B \n | A || B || C \n |- \n ! C \n | A || A || A \n |} \n \n :is associative. Thus, for example, A(BC)=(AB)C = A. This operation is not commutative. \n * Because [[Matrix (mathematics)|matrices]] represent [[linear map|linear function]]s, and [[matrix multiplication]] represents function composition, one can immediately conclude that matrix multiplication is associative. < ref > {{cite web|url=http://www.khanacademy.org/math/linear-algebra/matrix-transformations/composition-of-transformations/v/matrix-product-associativity|title=Matrix product associativity|publisher=Khan Academy|access-date=5 June 2016}} < /ref > \n \n == Propositional logic == \n \n === Rule of replacement === \n In standard truth-functional propositional logic, ''association'', < ref > {{cite book |last1=Moore |first1=Brooke Noel |last2=Parker |first2=Richard |date=2017 |title=Critical Thinking |location=New York |publisher=McGraw-Hill Education |page=321 |isbn=9781259690877|edition=12th }} < /ref > < ref > {{cite book |last1=Copi |first1=Irving M. |last2=Cohen |first2=Carl |last3=McMahon |first3=Kenneth |date=2014 |title=Introduction to Logic |location=Essex |publisher=Pearson Education |page=387 |isbn=9781292024820|edition=14th }} < /ref >  or ''associativity'' < ref > {{cite book |last1=Hurley |first1=Patrick J. |last2=Watson |first2=Lori |date=2016 |title=A Concise Introduction to Logic |location=Boston |publisher=Cengage Learning |page=427 |isbn=9781305958098|edition=13th }} < /ref >  are two [[Validity (logic)|valid]] [[rule of replacement|rules of replacement]]. The rules allow one to move parentheses in [[well-formed formula|logical expressions]] in [[formal proof|logical proofs]]. The rules (using [[Logical connective#In language|logical connectives]]  notation) are: \n : < math > (P \\lor (Q \\lor R)) \\Leftrightarrow ((P \\lor Q) \\lor R) < /math > \n and \n : < math > (P \\land (Q \\land R)) \\Leftrightarrow ((P \\land Q) \\land R), < /math > \n where  \" < math > \\Leftrightarrow < /math > \"  is a [[metalogic]]al [[Symbol (formal)|symbol]] representing  \" can be replaced in a [[Formal proof|proof]] with \" . \n \n === Truth functional connectives === \n ''Associativity'' is a property of some [[logical connective]]s of truth-functional [[propositional logic]]. The following [[logical equivalence]]s demonstrate that associativity is a property of particular connectives. The following are truth-functional [[tautology (logic)|tautologies]]. < ref > {{cite web|url=https://math.stackexchange.com/q/2197480 |title=Symbolic Logic Proof of Associativity |work=Math.stackexchange.com |date=22 March 2017}} < /ref > \n \n '''Associativity of disjunction''': \n : < math > ((P \\lor Q) \\lor R) \\leftrightarrow (P \\lor (Q \\lor R)) < /math > \n : < math > (P \\lor (Q \\lor R)) \\leftrightarrow ((P \\lor Q) \\lor R) < /math > \n '''Associativity of conjunction''': \n : < math > ((P \\land Q) \\land R) \\leftrightarrow (P \\land (Q \\land R)) < /math > \n : < math > (P \\land (Q \\land R)) \\leftrightarrow ((P \\land Q) \\land R) < /math > \n '''Associativity of equivalence''': \n : < math > ((P \\leftrightarrow Q) \\leftrightarrow R) \\leftrightarrow (P \\leftrightarrow (Q \\leftrightarrow R)) < /math > \n : < math > (P \\leftrightarrow (Q \\leftrightarrow R)) \\leftrightarrow ((P \\leftrightarrow Q) \\leftrightarrow R) < /math > \n \n Joint denial is an example of a truth functional connective that is ''not'' associative. \n \n == Non-associative operation== \n A binary operation  < math > * < /math >  on a set ''S'' that does not satisfy the associative law is called '''non-associative'''. Symbolically, \n \n : < math > (x*y)*z\\ne x*(y*z)\\qquad\\mbox{for some }x,y,z\\in S. < /math > \n \n For such an operation the order of evaluation ''does'' matter. For example: \n * [[Subtraction]] \n : < math > \n (5-3)-2 \\, \\ne \\, 5-(3-2) \n < /math > \n * [[Division (mathematics)|Division]] \n : < math > \n (4/2)/2 \\, \\ne \\, 4/(2/2) \n < /math > \n * [[Exponentiation]] \n : < math > \n 2^{(1^2)} \\, \\ne \\, (2^1)^2 \n < /math > \n Also note that infinite sums are not generally associative, for example: \n : < math > \n (1+-1)+(1+-1)+(1+-1)+(1+-1)+(1+-1)+(1+-1)+\\dots \\, = \\, 0 \n < /math > \n whereas \n : < math > \n 1+(-1+1)+(-1+1)+(-1+1)+(-1+1)+(-1+1)+(-1+1)+\\dots \\, = \\, 1 \n < /math > \n \n The study of non-associative structures arises from reasons somewhat different from the mainstream of classical algebra. One area within [[non-associative algebra]] that has grown very large is that of [[Lie algebra]]s. There the associative law is replaced by the [[Jacobi identity]]. Lie algebras abstract the essential nature of [[infinitesimal transformation]]s, and have become ubiquitous in mathematics. \n \n There are other specific types of non-associative structures that have been studied in depth; these tend to come from some specific applications or areas such as [[combinatorial mathematics]]. Other examples are [[quasigroup]], [[quasifield]], [[non-associative ring]], [[non-associative algebra]] and [[commutative non-associative magmas]]. \n \n ===Nonassociativity of floating point calculation=== \n \n In mathematics, addition and multiplication of real numbers is associative.  By contrast, in computer science, the addition and multiplication of [[floating point]] numbers is ''not'' associative, as rounding errors are introduced when dissimilar-sized values are joined together. < ref > Knuth, Donald, [[The Art of Computer Programming]], Volume 3, section 4.2.2 < /ref > \n \n To illustrate this, consider a floating point representation with a 4-bit [[significand|mantissa]]: \n < br / > (1.000 < sub > 2 < /sub > \u00d72 < sup > 0 < /sup >  + \n 1.000 < sub > 2 < /sub > \u00d72 < sup > 0 < /sup > ) + \n 1.000 < sub > 2 < /sub > \u00d72 < sup > 4 < /sup >  = \n 1.000 < sub > 2 < /sub > \u00d72 < sup > {{fontcolor|red|1}} < /sup >  + \n 1.000 < sub > 2 < /sub > \u00d72 < sup > 4 < /sup >  = \n 1.00{{fontcolor|red|1}} < sub > 2 < /sub > \u00d72 < sup > 4 < /sup > \n < br / > 1.000 < sub > 2 < /sub > \u00d72 < sup > 0 < /sup >  + \n (1.000 < sub > 2 < /sub > \u00d72 < sup > 0 < /sup >  + \n 1.000 < sub > 2 < /sub > \u00d72 < sup > 4 < /sup > ) = \n 1.000 < sub > 2 < /sub > \u00d72 < sup > {{fontcolor|red|0}} < /sup >  + \n 1.000 < sub > 2 < /sub > \u00d72 < sup > 4 < /sup >  = \n 1.00{{fontcolor|red|0}} < sub > 2 < /sub > \u00d72 < sup > 4 < /sup > \n \n Even though most computers compute with a 24 or 53 bits of mantissa, < ref > {{Cite book |title=IEEE Standard for Floating-Point Arithmetic |author=IEEE Computer Society |date=29 August 2008 |id=IEEE Std 754-2008|doi=10.1109/IEEESTD.2008.4610935 |ref=CITEREFIEEE_7542008 |isbn=978-0-7381-5753-5}} < /ref >  this is an important source of rounding error, and approaches such as the [[Kahan summation algorithm]] are ways to minimise the errors. It can be especially problematic in parallel computing. < ref > {{Citation \n | last1   = Villa \n | first1   = Oreste \n | last2   = Chavarr\u00eda-mir \n | first2   = Daniel \n | last3   = Gurumoorthi \n | first3   = Vidhya \n | last4   = M\u00e1rquez \n | first4   = Andr\u00e9s \n | last5   = Krishnamoorthy \n | first5   = Sriram \n | title   = Effects of Floating-Point non-Associativity on Numerical Computations on Massively Multithreaded Systems \n | url   = http://cass-mt.pnnl.gov/docs/pubs/pnnleffects_of_floating-pointpaper.pdf \n | access-date   = 8 April 2014 \n | archive-url   = https://web.archive.org/web/20130215171724/http://cass-mt.pnnl.gov/docs/pubs/pnnleffects_of_floating-pointpaper.pdf \n | archive-date   = 15 February 2013 \n | url-status   = dead \n }} < /ref > < ref name= \" Goldberg_1991 \" > {{cite journal|last=Goldberg|first=David|author-link=David Goldberg (PARC)|date=March 1991|title=What Every Computer Scientist Should Know About Floating-Point Arithmetic|url=http://perso.ens-lyon.fr/jean-michel.muller/goldberg.pdf|journal=[[ACM Computing Surveys]]|volume=23|issue=1|pages=5\u201348|doi=10.1145/103162.103163|s2cid=222008826|access-date=20 January 2016}} ([http://www.validlab.com/goldberg/paper.pdf], [http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html] {{Webarchive|url=https://web.archive.org/web/20160406101256/http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html |date=2016-04-06 }}) < /ref > \n \n === Notation for non-associative operations === \n {{main|Operator associativity}} \n \n In general, parentheses must be used to indicate the [[order of operations|order of evaluation]] if a non-associative operation appears more than once in an expression (unless the notation specifies the order in another way, like  < math > \\dfrac{2}{3/4} < /math > ). However, [[mathematician]]s agree on a particular order of evaluation for several common non-associative operations. This is simply a notational convention to avoid parentheses. \n \n A '''left-associative''' operation is a non-associative operation that is conventionally evaluated from left to right, i.e., \n : < math > \n \\left. \n \\begin{matrix} \n x*y*z=(x*y)*z\\qquad\\qquad\\quad\\, \n \\\\ \n w*x*y*z=((w*x)*y)*z\\quad \n \\\\ \n \\mbox{etc.}\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\ \\ \\, \n \\end{matrix} \n \\right\\} \n \\mbox{for all }w,x,y,z\\in S \n < /math > \n while a '''right-associative''' operation is conventionally evaluated from right to left: \n : < math > \n \\left. \n \\begin{matrix} \n x*y*z=x*(y*z)\\qquad\\qquad\\quad\\, \n \\\\ \n w*x*y*z=w*(x*(y*z))\\quad \n \\\\ \n \\mbox{etc.}\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\ \\ \\, \n \\end{matrix} \n \\right\\} \n \\mbox{for all }w,x,y,z\\in S \n < /math > \n Both left-associative and right-associative operations occur. Left-associative operations include the following: \n * Subtraction and division of real numbers: < ref > George Mark Bergman: [https://math.berkeley.edu/~gbergman/misc/numbers/ord_ops.html Order of arithmetic operations] < /ref > < ref > Education Place: [http://eduplace.com/math/mathsteps/4/a/index.html The Order of Operations] < /ref > < ref > [[Khan Academy]]: [https://www.khanacademy.org/math/pre-algebra/pre-algebra-arith-prop/pre-algebra-order-of-operations/v/introduction-to-order-of-operations The Order of Operations], timestamp [https://www.youtube.com/watch?v=ClYdw4d4OmA & t=5m40s 5m40s] < /ref > < ref > Virginia Department of Education: [http://www.doe.virginia.gov/instruction/mathematics/middle/algebra_readiness/curriculum_companion/order-operations.pdf#page=3 Using Order of Operations and Exploring Properties], section 9 < /ref > < ref name= \" Bronstein_1987 \" > Bronstein: [[:de:Taschenbuch der Mathematik]], pages 115-120, chapter: 2.4.1.1, {{ISBN|978-3-8085-5673-3}} < /ref > \n :: < math > x-y-z=(x-y)-z < /math > \n :: < math > x/y/z=(x/y)/z < /math > \n * Function application: \n :: < math > (f \\, x \\, y) = ((f \\, x) \\, y) < /math > \n :This notation can be motivated by the [[currying]] isomorphism. \n \n Right-associative operations include the following: \n * [[Exponentiation]] of real numbers in superscript notation: \n :: < math > x^{y^z}=x^{(y^z)} < /math > \n \n :Exponentiation is commonly used with brackets or right-associatively because a repeated left-associative exponentiation operation is of little use. Repeated powers would mostly be rewritten with multiplication: \n \n :: < math > (x^y)^z=x^{(yz)} < /math > \n \n :Formatted correctly, the superscript inherently behaves as a set of parentheses; e.g. in the expression  < math > 2^{x+3} < /math >  the addition is performed [[order of operations|before]] the exponentiation despite there being no explicit parentheses  < math > 2^{(x+3)} < /math >  wrapped around it. Thus given an expression such as  < math > x^{y^z} < /math > , the full exponent  < math > y^z < /math >  of the base  < math > x < /math >  is evaluated first. However, in some contexts, especially in handwriting, the difference between  < math > {x^y}^z=(x^y)^z < /math > ,  < math > x^{yz}=x^{(yz)} < /math >  and  < math > x^{y^z}=x^{(y^z)} < /math >  can be hard to see. In such a case, right-associativity is usually implied. \n \n * [[Function (mathematics)|Function definition]] \n :: < math > \\mathbb{Z} \\rarr \\mathbb{Z} \\rarr \\mathbb{Z} = \\mathbb{Z} \\rarr (\\mathbb{Z} \\rarr \\mathbb{Z}) < /math > \n :: < math > x \\mapsto y \\mapsto x - y = x \\mapsto (y \\mapsto x - y) < /math > \n \n :Using right-associative notation for these operations can be motivated by the [[Curry\u2013Howard correspondence]] and by the [[currying]] isomorphism. \n \n Non-associative operations for which no conventional evaluation order is defined include the following. \n * Exponentiation of real numbers in infix notation: < ref name= \" Codeplea_2016 \" > [https://codeplea.com/exponentiation-associativity-options Exponentiation Associativity and Standard Math Notation] Codeplea. 23 August 2016. Retrieved 20 September 2016. < /ref > \n :: < math > (x^\\wedge y)^\\wedge z\\ne x^\\wedge(y^\\wedge z) < /math > \n * [[Knuth's up-arrow notation|Knuth's up-arrow operators]]: \n :: < math >  a \\uparrow \\uparrow (b \\uparrow \\uparrow c) \\ne (a \\uparrow \\uparrow b) \\uparrow \\uparrow c < /math > \n :: < math >  a \\uparrow \\uparrow \\uparrow (b \\uparrow \\uparrow \\uparrow c) \\ne (a \\uparrow \\uparrow \\uparrow b) \\uparrow \\uparrow \\uparrow c < /math > \n * Taking the [[cross product]] of three vectors: \n :: < math > \\vec a \\times (\\vec b \\times \\vec c) \\neq (\\vec a \\times \\vec b ) \\times \\vec c \\qquad \\mbox{ for some } \\vec a,\\vec b,\\vec c \\in \\mathbb{R}^3 < /math > \n * Taking the pairwise [[average]] of real numbers: \n :: < math > {(x+y)/2+z\\over2}\\ne{x+(y+z)/2\\over2} \\qquad \\mbox{for all }x,y,z\\in\\mathbb{R} \\mbox{ with }x\\ne z. < /math > \n * Taking the [[complement (set theory)|relative complement]] of sets  < math > (A\\backslash B)\\backslash C < /math >  is not the same as  < math > A\\backslash (B\\backslash C) < /math > . (Compare [[material nonimplication]] in logic.) \n \n ==See also== \n {{Wiktionary}} \n * [[Light's associativity test]] \n * [[Telescoping series]], the use of addition associativity for cancelling terms in an infinite [[series (mathematics)|series]] \n * A [[semigroup]] is a set with an associative binary operation. \n * [[Commutativity]] and [[distributivity]] are two other frequently discussed properties of binary operations. \n * [[Power associativity]], [[alternativity]], [[flexible algebra|flexibility]] and [[N-ary associativity]] are weak forms of associativity. \n * [[Moufang loop|Moufang identities]] also provide a weak form of associativity. \n \n ==References== \n {{reflist}} \n \n [[Category:Properties of binary operations]] \n [[Category:Elementary algebra]] \n [[Category:Functional analysis]] \n [[Category:Rules of inference]]"
]
